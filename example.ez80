#include	"Iris3D.inc"

.org userMem - 2
.db tExtTok, tAsm84CeCmp
.assume ADL=1

	call	IEngineInit

	call	ILoadMesh

;	ld	hl, 0
	ld	hl, 256
	ld	(EulerAngle), hl

	ld	ix, WorldMatrix
	lea	hl, ix+0
	call	IMatrixLoadIdentity
	;ld	hl, 32768  ; all
	ld	hl, 130000	; tomberry
	;ld	hl, 13000  ; lara
	;ld	hl, 12000	;sier
	ld	(ix+15), hl

MainLoop:
	call	ICPUTimerStart
	ld	hl, (EulerAngle)
	ld	iy, Quaternion
	ld	ix, UnitVector
	call	IQuaternionRotationAxis
	ld	ix, WorldMatrix
	call	IQuaternionGetMatrix

#define	VERTEX_BUFFER	saveSScreen	; 21945 bytes

	ld	hl, VertexCount		; 890000 TStates
	ld	ix, VERTEX_BUFFER + 8
	ld	iy, VertexData
_VertexStream:
	push	hl
	push	ix
	ld	ix, WorldMatrix
	call	IVectorTransform
	;call	IVRAM
	call	IProject
	pop	ix
	ld	(ix+1), hl
	ld	(ix+0), e
	ld	hl, (IPositionZ)
	ld	(ix+4), hl
	pop	hl
	dec	hl
	lea	ix, ix+8
	lea	iy, iy+6
	ld	a, h
	or	l
	jr	nz, _VertexStream

	ld	bc, FaceCount		; 230000TStates
	ld	ix, FaceData
	call	IComputeDepthList
	ld	bc, FaceCount
	ld	ix, FaceData
	call	IInsertionSort

	;call	IWait
	;ld	c, %01001010		; grey
	;ld	c, %11111111
	ld	c, %00000000
	call	IClear	; 540000 TStates

	ld	hl, FaceCount	; 2300000 TStates
	ld	iy, FaceData
_FaceStream:
	push	hl
	push	iy
	lea	iy, iy+3
	ld	a, (iy+0)
	ld	(IColor), a
	inc	iy
;	ld	ix, WorldMatrix+6
;	call	IVectorDot
;	bit	7, h
;	jr	z, _iiii

; 308TStates
;	ld	ix, test
;	ld	hl, (iy+0)
;	ld	de, (hl)
;	ld	(ix), de
;;	inc	hl \ inc hl \ inc hl
;	ld	a, (hl)
;	ld	(ix+3), a
;	ld	hl, (iy+3)
;	ld	de, (hl)
;;	ld	(ix+4), de
;	inc	hl \ inc hl \ inc hl
;;	ld	a, (hl)
;	ld	(ix+7), a
;	ld	hl, (iy+6)
;	ld	de, (hl)
;	ld	(ix+8), de
;	inc	hl \ inc hl \ inc hl
;	ld	a, (hl)
;	ld	(ix+11), a
	lea	ix, iy+0
; RBG
	call	IDrawTriangle
_iiii:
	pop	iy
	pop	hl
	lea	iy, iy+13
	dec	hl
	ld	a, h
	or	l
	jp	nz, _FaceStream
	call	ICPUTimerRead
	halt

; ISwap
	call	IFlush

KeyboardTest:
	ld hl,$F50000 
	ld (hl),2
	xor a,a
kwait:
	cp a,(hl)
	jr nz,kwait

	ld	de, 1
	ld	a, ($F5001E)
	bit	1, a
	jr	z, _kskip
	ld	hl, (EulerAngle)
	add	hl, de
	ld	(EulerAngle), hl
_kskip:
	ld	de, -1
	ld	a, ($F5001E)
	bit	2, a
	jr	z, _kskip2
	ld	hl, (EulerAngle)
	add	hl, de
	ld	(EulerAngle), hl
_kskip2:

	ld a,($F5001C)
	bit 6,a 

	jp	z, MainLoop
	jp	IEngineQuit

#include	"IrisMain.ez80"
test:
	.dl	189,0,90,64,150,80
UnitVector:
	.dl	0,16384,0
Quaternion:
	.dl	0,0,0,0
WorldMatrix:
	.dl	0,0,0,0,0,0
EulerAngle:
	.dl	0,0,0
MdlData:
;#include	"tools/sierpinski.inc"
;#include	"tools/Model.inc"
;#include	"tools/cube.inc"
;#include	"tools/walrii.inc"
;#include	"tools/lara.inc"
;#include	"tools/chocobo.inc"
;#include	"tools/tomberry.inc"
#include	"tools/starfox.inc"

ILoadMesh:
	ld	ix, FaceData+4
	ld	bc, FaceCount
	ld	de, VERTEX_BUFFER
_ILoadingLoop:
	ld	hl, (ix+0)
	add	hl, hl
	add	hl, hl
	add	hl, hl
	add	hl, de
	ld	(ix+0), hl
	ld	hl, (ix+3)
	add	hl, hl
	add	hl, hl
	add	hl, hl
	add	hl, de
	ld	(ix+3), hl
	ld	hl, (ix+6)
	add	hl, hl
	add	hl, hl
	add	hl, hl
	add	hl, de
	ld	(ix+6), hl
	lea	ix, ix+13
	dec	bc
	ld	a, b
	or	c
	jr	nz, _ILoadingLoop
	ret

IProject:	
; read = 128
	ld	hl, (IPositionY)
	ld	bc, (IPositionZ)	
	ld	a, (IPositionY+2)
	rlca
	jr	nc, _iskip
	or	a, a
	ex	de, hl
	sbc	hl, hl
	sbc	hl, de
_iskip:
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ adc a,a
;	add	hl, hl \ sbc hl, bc
	cpl
	jr	c, _askp
	neg
_askp:
	add	a, 120
	ld	e, a
_end:
	ld	hl, (IPositionX)
	ld	a, (IPositionX+2)
	rlca
	jr	nc, _iskip2
	push	de
	or	a, a
	ex	de, hl
	sbc	hl, hl
	sbc	hl, de
	pop	de
_iskip2:
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ adc a,a
	cpl
	jr	c, other2
;	add	hl, hl \ sbc hl, bc
	sbc	hl, hl
;	inc	hl
;	add	a, l
	ld	l, a
	ld	c, e
	ld	de, 160
	add	hl, de
	ld	e, c
	ret
other2:
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	c, e
	ld	de, 160
	ex	de, hl
	sbc	hl, de
	ld	e, c
	ret



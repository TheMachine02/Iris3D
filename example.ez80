#include	"Iris3D.inc"

.org userMem - 2
.db tExtTok, tAsm84CeCmp
.assume ADL=1

	call	IEngineInit

	ld	hl, 0
	ld	(EulerAngle), hl

	ld	ix, WorldMatrix
	lea	hl, ix+0
	call	IMatrixLoadIdentity
	ld	hl, 32768
	ld	(ix+15), hl
	
MainLoop:
	ld	c, 0	; black
	call	IClear

	ld	hl, (EulerAngle)
	call	IMatrixRotationY

MainRender:	
	
	ld	hl, 1171
	ld	iy, MdlData

RenderLoop:
	push	hl
	call	IVectorTransform
	lea	iy, iy+9
	call	IDrawBad
	pop	hl
	dec	hl	
	ld	a, h
	or	l
	jr	nz, RenderLoop

	call	IFlush

KeyboardTest:
	ld hl,$F50000 
	ld (hl),2
	xor a,a
kwait:
	cp a,(hl)
	jr nz,kwait

	ld	a, ($F5001E)
	bit	1, a
	jr	z, _kskip
	ld	hl, (EulerAngle)
	inc	l
	ld	(EulerAngle), hl
_kskip:
	ld	a, ($F5001E)
	bit	2, a
	jr	z, _kskip2
	ld	hl, (EulerAngle)
	dec	l
	ld	(EulerAngle), hl
_kskip2:

	ld a,($F5001C)
	bit 6,a 
	jr	z, MainLoop
	jp	IEngineQuit

#include	"IrisMain.ez80"

WorldMatrix:
	.dl	0,0,0,0,0,0
EulerAngle:
	.dl	0
MdlData:
#include	Model.inc

IDrawBad:	
	ld	hl, (IPositionY)
	ld	bc, (IPositionZ)	
	ld	a, (IPositionY+2)
	rla
	push	af
	jr	nc, _iskip
	or	a, a
	ex	de, hl
	sbc	hl, hl
	sbc	hl, de
_iskip:
	add hl, hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
;	add	hl, hl \ sbc hl, bc
; c = 0, nc = 1
	cpl
	or	a, a
	sbc	hl, hl
;	inc	hl
;	add	a, l
	ld	l, a
	pop	af
	jr	c, _other
	ex	de, hl
	ld	hl, 120
	or	a, a
	sbc	hl, de
	ex	de, hl
	jr	_end
_other:
	ld	de, 120
	add	hl, de
	ex	de, hl
_end:
	ld	hl, (IPositionX)
	ld	a, (IPositionX+2)
	rla
	push	af
	jr	nc, _iskip2
	push	de
	or	a, a
	ex	de, hl
	sbc	hl, hl
	sbc	hl, de
	pop	de
_iskip2:
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
;	add	hl, hl \ sbc hl, bc
	cpl
	or	a, a
	sbc	hl, hl
;	inc	hl
;	add	a, l
	ld	l, a
	pop	af
	jr	c, other2
	ld	bc, 160
	add	hl, bc
	jr	_end2
other2:
	push	de
	ld	de, 160
	or	a, a
	ex	de, hl
	sbc	hl, de
	pop	de
_end2:
; hl=x, de= y
	ld	c, iyl
	ld	d, 160	; [8]
	mlt	de		; [12]
	ex	de, hl	; [4]
	add	hl, hl	; [4]
	add	hl, de	; [4]
	ld	de, (IFramebuffer)	; [32]
	add	hl, de	; [4]
	ld	(hl), c	; [6]
	ret			; [x]


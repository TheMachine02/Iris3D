#comment
IReciprocal:
	push	hl
	pop	bc
	ld	hl, $2
	sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	cpl
	ld	d, a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	cpl
	ld	e, a
	ex	de, hl
	;slhl	8
	add	hl, hl
	add	hl, hl
	add	hl, hl
	add	hl, hl
	add	hl, hl
	add	hl, hl
	add	hl, hl
	add	hl, hl
	ex	de, hl
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	add hl,hl \ sbc hl,bc \ jr nc,$+3 \ add hl,bc \ adc a,a
	cpl
	ld	e, a
	ex	de, hl
	ret
#endcomment
ISquareRoot:
    xor a \ ld b,l \ push bc \ ld b,a \ ld d,a \ ld c,a \ ld l,a \ ld e,a
;Iteration 1
    add hl,hl \ rl c \ add hl,hl \ rl c
    sub c \ jr nc,$+6 \ inc e \ inc e \ cpl \ ld c,a
;Iteration 2
    add hl,hl \ rl c \ add hl,hl \ rl c \ rl e \ ld a,e
    sub c \ jr nc,$+6 \ inc e \ inc e \ cpl \ ld c,a
;Iteration 3
    add hl,hl \ rl c \ add hl,hl \ rl c \ rl e \ ld a,e
    sub c \ jr nc,$+6 \ inc e \ inc e \ cpl \ ld c,a
;Iteration 4
    add hl,hl \ rl c \ add hl,hl \ rl c \ rl e \ ld a,e
    sub c \ jr nc,$+6 \ inc e \ inc e \ cpl \ ld c,a
;Iteration 5
    add hl,hl \ rl c \ add hl,hl \ rl c \ rl e \ ld a,e
    sub c \ jr nc,$+6 \ inc e \ inc e \ cpl \ ld c,a
;Iteration 6
    add hl,hl \ rl c \ add hl,hl \ rl c \ rl e \ ld a,e
    sub c \ jr nc,$+6 \ inc e \ inc e \ cpl \ ld c,a

;Iteration 7
    add hl,hl \ rl c \ add hl,hl \ rl c \ rl b
    ex de,hl \ add hl,hl \ push hl \ sbc hl,bc \ jr nc,$+8
    ld a,h \ cpl \ ld b,a
    ld a,l \ cpl \ ld c,a
    pop hl
    jr nc,$+4 \ inc hl \ inc hl
    ex de,hl
;Iteration 8
    add hl,hl \ ld l,c \ ld h,b \ adc hl,hl \ adc hl,hl
    ex de,hl \ add hl,hl \ sbc hl,de \ add hl,de \ ex de,hl
    jr nc,$+6 \ sbc hl,de \ inc de \ inc de
;Iteration 9
    pop af
    rla \ adc hl,hl \ rla \ adc hl,hl
    ex de,hl \ add hl,hl \ sbc hl,de \ add hl,de \ ex de,hl
    jr nc,$+6 \ sbc hl,de \ inc de \ inc de
;Iteration 10
    rla \ adc hl,hl \ rla \ adc hl,hl
    ex de,hl \ add hl,hl \ sbc hl,de \ add hl,de \ ex de,hl
    jr nc,$+6 \ sbc hl,de \ inc de \ inc de
;Iteration 11
    rla \ adc hl,hl \ rla \ adc hl,hl
    ex de,hl \ add hl,hl \ sbc hl,de \ add hl,de \ ex de,hl
    jr nc,$+6 \ sbc hl,de \ inc de \ inc de
;Iteration 12
    rla \ adc hl,hl \ rla \ adc hl,hl
    ex de,hl \ add hl,hl \ sbc hl,de \ add hl,de \ ex de,hl
    jr nc,$+6 \ sbc hl,de \ inc de \ inc de
    rr d \ rr e \ ld a,$B7 \ jr nc,+_ \ xor a,%10000000
_:	ld (Div_SMC),a
;Iteration 13 (new)
    add hl,hl \ add hl,hl
    ex de,hl \ add hl,hl \ sbc hl,de \ add hl,de \ ex de,hl
    jr nc,$+6 \ sbc hl,de \ inc de \ inc de
;Iteration 14
    add hl,hl \ add hl,hl
    ex de,hl \ add hl,hl \ sbc hl,de \ add hl,de \ ex de,hl
    jr nc,$+6 \ sbc hl,de \ inc de \ inc de
;Iteration 15
    add hl,hl \ add hl,hl
    ex de,hl \ add hl,hl \ sbc hl,de \ add hl,de \ ex de,hl
    jr nc,$+6 \ sbc hl,de \ inc de \ inc de
;Iteration 16
    add hl,hl \ add hl,hl
    ex de,hl \ add hl,hl \ sbc hl,de \ add hl,de \ ex de,hl
    jr nc,$+6 \ sbc hl,de \ inc de \ inc de
Div_SMC:	or a,a
	rl e \ ret

IFPMlt:
; HLxDE/256 [16bits]
; (HxD*256+LxD+ExH+LxE/256)
	ld	b, h
	ld	c, l
	ld	l, d
	mlt	hl
	bit	7, b
	jr	z, $+5
	or	a, a
	sbc	hl, de
	bit	7, d
	jr	z, $+5
	or	a, a
	sbc	hl, bc
	slhl
; now need to do (CxD+BxE+ExC/256)
	ld	a, c
	ld	c, e
	mlt	bc
	add	hl, bc
	ld	c, a
	ld	b, d
	mlt	bc
	add	hl, bc
	ld	c, a
	ld	b, e
	mlt	bc
	ld	c, b
	ld	b, 0
	add	hl, bc
	ret
IFPSquare:
; HL²/256
; Destroy DE,A [16bits]
; (HxH*256+LxH*2+LxL/256)
	bit	7, h
	jr	z, _IFPSAbsSkp
	ex	de, hl
	or	a, a
	sbc	hl, hl
	sbc	hl, de
_IFPSAbsSkp:
	ld	d, h
	ld	e, l
	ld	l, h
	mlt	hl
	slhl
	ld	a, e
	mlt	de
	add	hl, de
	add	hl, de
	ld	e, a
	ld	d, a
	mlt	de
	ld	e, d
	ld	d, 0
	add	hl, de
	ret
IFPCos:
	inc	h
IFPSin:
	call	IQuatSin
; divide by 64 to get a FP16.8 value
	add	hl, hl
	add	hl, hl
	ld	a, hlu
	ld	c, h
	add	hl, hl
	sbc	hl, hl
	ld	h, a
	ld	l, c
	ret




